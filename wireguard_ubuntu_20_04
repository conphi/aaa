apt install wireguard

cd /etc/wireguard
wg genkey | tee sprivatekey | wg pubkey > spublickey
wg genkey | tee cprivatekey | wg pubkey > cpublickey

################ server conf#################
cat > /etc/wireguard/swg.conf << _EOF
[Interface]
PrivateKey = $(cat /etc/wireguard/sprivatekey)
Address = 10.0.0.1/24
ListenPort = XXXX
SaveConfig = true
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o XXXX -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o XXXX -j MASQUERADE
_EOF
############################################

################ Client conf #################
cat > /etc/wireguard/client.conf << _EOF
[Interface]
PrivateKey = $(cat /etc/wireguard/cprivatekey)
Address = 10.0.0.2/32
DNS = X.X.X.X,X.X.X.X
[Peer]
PublicKey = $(cat /etc/wireguard/spublickey)
Endpoint = X.X.X.X:XXXX
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
_EOF
#############################################

wg-quick up swg

########## add client peer ##############
wg set swg peer $(cat /etc/wireguard/cpublickey) allowed-ips 10.0.0.2/32
#########################################

############### forward #####################
cat /etc/sysctl.conf
vim /etc/sysctl.conf
net.ipv4.ip_forward=1
sysctl -p
net.ipv4.ip_forward=1
#############################################

reboot
wg-quick down swg
systemctl enable wg-quick@swg.service
systemctl start wg-quick@swg.service
wg

###########    qrencode   #######################
qrencode -t ANSIUTF8 < /etc/wireguard/client.conf

################ ip rule #################################
安装wireguard前
ip rule
0:      from all lookup local
32766:  from all lookup main
32767:  from all lookup default
#############################################################
sellibitze
·
9 hr. ago
The issue is most likely routing. It's to be expected that, for example, enabling a VPN on a remote server makes it inaccessible because everything is routed through the VPN.

But Linux is powerful. It allows you to do policy-based routing and even virtualize the network stack (network namespaces).

You could add policy-based routing so that IP packets with the VPS' public IP address as source are still routed using your old/native default route. This should make all TCP-based services (including SSH) work again.

You need two commands for that:

ip rule and

ip route

Add your old default route to a new routing table

ip route add default via x.y.z.w dev xxx table 123
and use

ip rule add from a.b.c.d table 123
to make Linux use that other table for all IP packets with source address a.b.c.d (which should be the VPS' public IP)
###############################################################

