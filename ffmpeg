###### iphone 不能播的问题
-profile:v main -level 3.1 -pix_fmt yuv420p
###################################################
## 安装中文字体
apt-get install fonts-wqy-zenhei fonts-wqy-microhei fonts-arphic-ukai fonts-arphic-uming fonts-noto-cjk

################
### Overlay the first subtitle stream (0:s:0) onto the video stream (0:v) with the subtitles positioned 460 pixels from the bottom of the video (0:main_h-460).
for i in {1..50}; do ffmpeg -i "S01E$(printf "%02d" $i).mkv" -filter_complex "[0:v][0:s:0]overlay=0:main_h-460[v]" -map "[v]" -map 0:a -c:v libx264 -c:a aac "S01E$(printf "%02d" $i).mp4"; done

############ H.264 ################################
####### -c:v libx264 -profile:v high ##############
High Profile (HiP): -profile:v high
Main Profile (MP): -profile:v main
Baseline Profile (BP): -profile:v baseline
Extended Profile (XP): -profile:v extended
High 10 Profile (Hi10P): -profile:v high10
High 4:2:2 Profile (Hi422P): -profile:v high422
High 4:4:4 Predictive Profile (Hi444PP): -profile:v high444
##################################################

############ linux command ##############################
for file in *.avi *.rmvb; do ffmpeg -i "$file" "${file%.*}.mp4"; done

############# window cmd #####################
for %i in (*.mp4) do ffmpeg -i "%i" -c:v libx264 -c:a copy "%~ni_h264.mp4"
for %i in (*.mp4) do ffmpeg -i "%i" -c:v libx264 -profile:v main -c:a aac "%~ni_h264_main.mp4"
#### fix error ##########
for %i in (*.mp4) do ffmpeg -i "%i" -c:v libx264 -profile:v main -pix_fmt yuv420p -c:a aac -channel_layout stereo -crf 27 "%~ni_h264_main_stereo.mp4"
### the -pix_fmt yuv420p option is added to enforce the 8-bit bit depth. 
###############################################

##################### 432hz ######################
ffmpeg -i input_file.ext -af "showfreqs"
ffmpeg -i input_file.ext -af "asetrate=44100*432/440,aresample=44100" output_file.ext
#####################################################################################

################## remove watermark of BBC ##############
ffmpeg.exe -i input.mp4 -vf "delogo=x=30:y=30:w=90:h=30" -c:a copy output.mp4
## ffmpeg -i enhui.mp4 -vf delogo=x=56:y=582:w=250:h=82:show=1 loveenhui.mp4 ## remove show=1 to remove green rectangle
#####################################################
# ffmpeg -ss 0 -t 20:00 -i inputA.avi -ss 0 -t 10:00 -i inputB.avi -filter_complex "[0:v][0:a][1:v][1:a]concat=n=2:v=1:a=1" out.mp4
ffmpeg -itsoffset -3 -c copy -i np.ass

ffmpeg -itsoffset -3 -i np.ass -c copy npp.ass
ffmpeg -i np1.mp4 -t 00:00:30 -vf ass=npp.ass outnp1.mp4

########## limit or reduce file size###################
https://unix.stackexchange.com/questions/28803/how-can-i-reduce-a-videos-size-with-ffmpeg

### default video:libx264 audio:aac crf:23 ###
ffmpeg -i input.mp4 output.mp4
#######################################################

######### rotate ###################
### without re-encoding
ffmpeg -i input.mp4 -c copy -metadata:s:v:0 rotate=90 output.mp4
ffmpeg -i input.mp4 -c copy -metadata:s:v:0 rotate=270 output.mp4

#### re-encoding
-c:a copy
ffmpeg -i in.mov -vf "transpose=1" out.mov
For the transpose parameter you can pass:

0 = 90CounterCLockwise and Vertical Flip (default)
1 = 90Clockwise
2 = 90CounterClockwise
3 = 90Clockwise and Vertical Flip
###########################################

### scale ################################
https://trac.ffmpeg.org/wiki/Scaling
-vf scale=-1:1080
-s hd1080

### cut ##################################
ffmpeg -ss 00:00:00.000 -i in.mp4 -t 00:00:09 -c copy out.mp4
ffmpeg -i input.mp4 -c copy -ss 00:04:25.000 -to 00:09:25.000 output.mp4
ffmpeg -i input.mp4 -c copy -to 00:09:07 output.mp4

## To skip the first 2 seconds
ffmpeg -ss 2 -i input.mp4 -c copy output.mp4

### crop ################################
ffmpeg -i in.mp4 -filter:v "crop=out_w:out_h:x:y" out.mp4

out_w is the width of the output rectangle
out_h is the height of the output rectangle
x and y specify the top left corner of the output rectangle

### quality ############################
-crf 18 -preset veryslow
-crf Consider 18 to be visually lossless (0 is lossless, 23 is default, and 51 is worst possible. )
-preset ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow.(a smaller file size but slow speed) Default is medium.
##########################################

### subtitles hardcode ###################
ffmpeg -i Midori.1992.mkv -vf "subtitles=Midori.1992.mkv" -movflags +faststart output.mp4
## -movflags +faststart: Optimizes the MP4 file for web playback.
# right # ffmpeg -i Midori.1992.mkv -vf "subtitles=Midori.1992.mkv" -t 00:03:00 -movflags +faststart output.mp4
# wrong # ffmpeg -i Midori.1992.mkv -vf "ass=Midori.1992.mkv" -t 00:03:00 -movflags +faststart output.mp4
############################
https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo
## default: h264 (libx264)); aac (native))
ffmpeg -i 指环王1：护戒使者\ \(2001\).mkv -map 0:0 -map 0:1 -vf subtitles="指环王1：护戒使者 (2001).mkv" ../../downloads/"指环王1：护戒使者 (2001)".mp4
ffmpeg -i input.mkv -map 0:0 -map 0:2 -map 0:5 -c copy output.mkv
ffmpeg -i "狗镇 (2003).mkv" -map 0:v -map 0:a:1 -c:v libx264 -c:a copy -vf "subtitles='狗镇 (2003).mkv':si=0" dogville.mp4
# -map 0:v selects the video stream from the first input file.
# -map 0:a:1 selects the second audio track from the first input file.
# 0: This is the index number of the input file. FFmpeg allows you to work with multiple input files, 
and they are indexed starting from 0. So, 0 refers to the first input file. 
If you had multiple input files, they would be indexed as 0, 1, 2, and so on.
#############################################################################

###### untested m3u8 & merge 
ffmpeg -i "http://example.com/chunklist.m3u8" -c copy out.mp4

cat *.ts | ffmpeg  -i pipe: -c:a copy -c:v copy output.mp4
or If you ts file name not have order,
grep .*.ts index.m3u8 | xargs cat | ffmpeg  -i pipe: -c:a copy -c:v copy output.mp4
#########################

##ffmpeg screen record
ffmpeg -f avfoundation -list_devices true -i ""
ffmpeg -f avfoundation -i "<screen device index>:<audio device index>" output.mkv
###### my case ##########
ffmpeg -f avfoundation -i "1:0" output.mkv
######################

################## merge ####################
The concat demuxer instructions:

create a text file named vidlist.txt in the following format:

file '/path/to/clip1'
file '/path/to/clip2'
file '/path/to/clip3'

ffmpeg -f concat -safe 0 -i vidlist.txt -c copy output
#################################################################
windows cmd
##不能处理文件名中’等特殊字符
(for %i in (*.mp4) do @echo file '%i') > mylist.txt
ffmpeg -safe 0 -f concat -i mylist.txt -c copy output.mp4
################################################################
https://trac.ffmpeg.org/wiki/Concatenate

for f in *.mp4; do echo "file '$f'" >> mylist.txt; done
################################################
B站合并视频用LosslessCut
windows下 cmd 获取视频名清单
(for %i in (*.mp4) do @echo %i) > mylist.txt
###############################################

批量延时转化
for f in *;do ffmpeg -i "${f}" -c:v libx264 -c:a aac "${f%.ts}.mp4";sleep 5m;done


获取视频时间
ffmpeg -i test.mp4 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//



ffmpeg -i test.mp4 -vf "ass=test.ass" test_ass.mp4


ffmpeg -i test.mp4 -vf subtitles=test.srt test_srt.mp4




ffmpeg视频黑白

./ffmpeg -i wry.mp4 -vf hue=s=0 -c:a copy wry_grey.mp4

./ffmpeg -i wry_srt.mp4 -vf hue=s=0 -c:a copy wry_srt_grey.mp4



ffmpeg -f concat -safe 0 -i <(for f in ./*.mp4; do echo "file '$PWD/$f'"; done) -c:v libvpx-vp9 -c:a libopus -r 30 -s hd720 000-720.mp4


-vcodec libx264 -crf 23 -preset medium -acodec aac -strict experimental -ac 2 -ar 44100 -ab 128k

-threads 2
