apt install davfs2
mkdir ~/webdav
mount -t davfs "http://<server_address>:8080/webdav" ~/webdav
umount ~/webdav

/etc/davfs2/secrets
<webdav-url> <username> <password>

mkdir /mnt/webdav
mount -t davfs http://.com/ /mnt/webdav

################################################################################
############# webdav server golang ##########################
package main

import (
	"flag"
	"net/http"
	"golang.org/x/net/webdav"
)

type AuthWebdav struct {
	webdav.Handler
}

// Correctly define the ServeHTTP method outside of main.
func (aw *AuthWebdav) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	user, pass, ok := r.BasicAuth()
	// Dereference username and password for comparison.
	if !ok || user != *username || pass != *password {
		w.Header().Set("WWW-Authenticate", `Basic realm="Restricted"`)
		http.Error(w, "Unauthorized", http.StatusUnauthorized)
		return
	}
	aw.Handler.ServeHTTP(w, r)
}

var (
	// Declare these as global variables so they can be accessed in the ServeHTTP method.
	username *string
	password *string
)

func main() {
	port := flag.String("p", "9001", "a port")
	dir := flag.String("d", "/root/tmp", "a dir")
	username = flag.String("u", "fuck", "username")
	password = flag.String("k", "fuck", "password")
	flag.Parse()

	handler := &AuthWebdav{
		Handler: webdav.Handler{
			Prefix:     "/fuck",
			FileSystem: webdav.Dir(*dir), // Fix the variable name to dir
			LockSystem: webdav.NewMemLS(),
		},
	}

	http.Handle("/fuck/", handler)
	http.ListenAndServe(":"+*port, nil)
}
